---
import { NAVIGATION_LINKS } from "@/constants.mjs";
import { ExternalLink, Sun, Moon, Menu, X } from "lucide-react";

const currentPath = Astro.url.pathname.replace(/\/$/, "");

function isActiveLink(href: string) {
  const normalizedHref = href.replace(/\/$/, "");
  // Home link is only active on root
  if (normalizedHref === "") {
    return currentPath === "" || currentPath === "/";
  }
  // For other links, match exact or subpage (but not root)
  return (
    currentPath === normalizedHref ||
    currentPath.startsWith(normalizedHref + "/")
  );
}
---
<nav class="border-b border-zinc-200 dark:border-zinc-800" aria-label="Main navigation">
  <div class="max-w-4xl mx-auto px-4 py-2 flex items-center justify-between">
    <a
      href="/"
      class="flex items-center space-x-1 no-underline focus:outline-none focus-visible:ring-2 focus-visible:ring-orange-500 hover:text-orange-500"
      aria-label="Home"
      tabindex="0"
    >
      <span class="text-lg font-bold sm:block">ðŸ”¥ RM3</span>
      <span class="hidden">Rob McGuinness</span>
    </a>

    <!-- Desktop links -->
    <div class="hidden sm:flex items-center space-x-1">
      {
        NAVIGATION_LINKS.map((item) => (
          item.href.startsWith('http') ? (
            <a
              href={item.href}
              class={`inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors no-underline focus:outline-none focus-visible:ring-2 focus-visible:ring-orange-500 px-3 py-1.5 hover:text-orange-500 hover:bg-orange-50 dark:hover:bg-zinc-800`}
              tabindex="0"
              target="_blank"
              rel="noopener noreferrer"
            >
              <span>{item.name}</span>
              <ExternalLink className="ml-1 w-4 h-4 inline" aria-label="External link" />
            </a>
          ) : (
            <a
              href={item.href}
              class={`inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors no-underline focus:outline-none focus-visible:ring-2 focus-visible:ring-orange-500 px-3 py-1.5 ${
                isActiveLink(item.href)
                  ? "bg-orange-50 dark:bg-neutral-900 border border-zinc-200 dark:border-zinc-800 text-orange-500"
                  : "hover:text-orange-500 hover:bg-orange-50 dark:hover:bg-zinc-800"
              }`}
              tabindex="0"
              aria-current={isActiveLink(item.href) ? "page" : undefined}
            >
              {item.name}
            </a>
          )
        ))
      }
    </div>

    <!-- Desktop Controls -->
    <div class="hidden sm:flex items-center space-x-2">
      <button
        id="theme-toggle"
        class="inline-flex items-center justify-center rounded-md p-2 text-sm font-medium transition-colors focus:outline-none focus-visible:ring-2 focus-visible:ring-orange-500 hover:text-orange-500 hover:bg-orange-50 dark:hover:bg-zinc-800"
        aria-label="Toggle dark mode"
        type="button"
      >
        <Sun className="w-4 h-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
        <Moon className="absolute w-4 h-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
        <span class="sr-only">Toggle theme</span>
      </button>
    </div>

    <!-- Mobile Controls -->
    <div class="flex items-center space-x-2 sm:hidden">
      <button
        id="mobile-theme-toggle"
        class="inline-flex items-center justify-center rounded-md p-2 text-sm font-medium transition-colors focus:outline-none focus-visible:ring-2 focus-visible:ring-orange-500 hover:text-orange-500 hover:bg-orange-50 dark:hover:bg-zinc-800"
        aria-label="Toggle dark mode"
        type="button"
      >
        <Sun className="w-4 h-4 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
        <Moon className="absolute w-4 h-4 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
        <span class="sr-only">Toggle theme</span>
      </button>

      <button
        id="mobile-menu-toggle"
        class="inline-flex items-center justify-center rounded-md p-2 text-sm font-medium transition-colors focus:outline-none focus-visible:ring-2 focus-visible:ring-orange-500 hover:text-orange-500 hover:bg-orange-50 dark:hover:bg-zinc-800"
        aria-label="Toggle mobile menu"
        aria-expanded="false"
        aria-controls="mobile-menu"
        type="button"
      >
        <Menu className="w-5 h-5 block" id="menu-icon" />
        <X className="w-5 h-5 hidden" id="close-icon" />
        <span class="sr-only">Toggle navigation menu</span>
      </button>
    </div>
  </div>

  <!-- Mobile Menu -->
  <div
    id="mobile-menu"
    class="hidden sm:hidden border-t border-zinc-200 dark:border-zinc-800"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="mobile-menu-toggle"
  >
    <div class="px-4 py-2 space-y-1">
      {
        NAVIGATION_LINKS.map((item) => (
          item.href.startsWith('http') ? (
            <a
              href={item.href}
              class={`flex items-center rounded-md text-sm font-medium transition-colors no-underline focus:outline-none focus-visible:ring-2 focus-visible:ring-orange-500 px-3 py-2 hover:text-orange-500 hover:bg-orange-50 dark:hover:bg-zinc-800`}
              target="_blank"
              rel="noopener noreferrer"
              role="menuitem"
            >
              <span>{item.name}</span>
              <ExternalLink className="ml-1 w-4 h-4 inline" aria-label="External link" />
            </a>
          ) : (
            <a
              href={item.href}
              class={`flex items-center rounded-md text-sm font-medium transition-colors no-underline focus:outline-none focus-visible:ring-2 focus-visible:ring-orange-500 px-3 py-2 ${
                isActiveLink(item.href)
                  ? "bg-orange-50 dark:bg-neutral-900 border border-zinc-200 dark:border-zinc-800 text-orange-500"
                  : "hover:text-orange-500 hover:bg-orange-50 dark:hover:bg-zinc-800"
              }`}
              aria-current={isActiveLink(item.href) ? "page" : undefined}
              role="menuitem"
            >
              {item.name}
            </a>
          )
        ))
      }
    </div>
  </div>
</nav>

<script>
  // Dark mode toggle functionality
  function initThemeToggle() {
    const themeToggle = document.getElementById('theme-toggle');
    const mobileThemeToggle = document.getElementById('mobile-theme-toggle');

    function toggleTheme() {
      const isDark = document.documentElement.classList.toggle('dark');
      localStorage.setItem('theme', isDark ? 'dark' : 'light');
    }

    // Set initial theme
    if (localStorage.getItem('theme') === 'dark' ||
        (!localStorage.getItem('theme') && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
      document.documentElement.classList.add('dark');
    }

    themeToggle?.addEventListener('click', toggleTheme);
    mobileThemeToggle?.addEventListener('click', toggleTheme);
  }

  // Mobile menu functionality
  function initMobileMenu() {
    const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
    const mobileMenu = document.getElementById('mobile-menu');
    const menuIcon = document.getElementById('menu-icon');
    const closeIcon = document.getElementById('close-icon');
    const menuItems = mobileMenu?.querySelectorAll('a[role="menuitem"]');

    let isMenuOpen = false;

    function toggleMenu() {
      isMenuOpen = !isMenuOpen;

      if (isMenuOpen) {
        mobileMenu?.classList.remove('hidden');
        menuIcon?.classList.add('hidden');
        closeIcon?.classList.remove('hidden');
        mobileMenuToggle?.setAttribute('aria-expanded', 'true');

        // Set focus management for menu items
        menuItems?.forEach((item, index) => {
          item.setAttribute('tabindex', '0');
        });

        // Focus first menu item
        (menuItems?.[0] as HTMLElement | undefined)?.focus();
      } else {
        mobileMenu?.classList.add('hidden');
        menuIcon?.classList.remove('hidden');
        closeIcon?.classList.add('hidden');
        mobileMenuToggle?.setAttribute('aria-expanded', 'false');

        // Reset tabindex for all menu items
        menuItems?.forEach(item => {
          item.setAttribute('tabindex', '-1');
        });

        // Return focus to toggle button
        mobileMenuToggle?.focus();
      }
    }

    function closeMenu() {
      if (isMenuOpen) {
        toggleMenu();
      }
    }

    // Toggle menu on button click
    mobileMenuToggle?.addEventListener('click', toggleMenu);

    // Close menu on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && isMenuOpen) {
        closeMenu();
      }
    });

    // Handle keyboard navigation within mobile menu
    mobileMenu?.addEventListener('keydown', (e) => {
      if (!isMenuOpen) return;

      const focusableItems = Array.from(menuItems || []);
      const currentIndex = focusableItems.findIndex(item => item === document.activeElement);

      switch (e.key) {
        case 'ArrowDown':
          e.preventDefault();
          const nextIndex = (currentIndex + 1) % focusableItems.length;
          (focusableItems[nextIndex] as HTMLElement | undefined )?.focus();
          break;
        case 'ArrowUp':
          e.preventDefault();
          const prevIndex = (currentIndex - 1 + focusableItems.length) % focusableItems.length;
          (focusableItems[prevIndex] as HTMLElement | undefined)?.focus();
          break;
        case 'Home':
          e.preventDefault();
          (focusableItems[0] as HTMLElement | undefined)?.focus();
          break;
        case 'End':
          e.preventDefault();
          (focusableItems[focusableItems.length - 1] as HTMLElement | undefined)?.focus();
          break;
        case 'Tab':
          // Close menu when tabbing out
          if (e.shiftKey && currentIndex === 0) {
            closeMenu();
          } else if (!e.shiftKey && currentIndex === focusableItems.length - 1) {
            closeMenu();
          }
          break;
      }
    });

    // Close menu when clicking outside
    document.addEventListener('click', (e) => {
      if (isMenuOpen && !mobileMenu?.contains(e.target as Node) && !mobileMenuToggle?.contains(e.target as Node)) {
        closeMenu();
      }
    });
  }

  // Initialize functionality when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    initThemeToggle();
    initMobileMenu();
  });
</script>
